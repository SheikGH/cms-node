// === CLEAN ARCHITECTURE - NODE + EXPRESS + MONGODB + JWT + RBAC ===

// Folder Structure:
// src/
// ├── api/                 => Controllers, Routes
// ├── application/         => DTOs, Interfaces
// ├── config/              => DB Config
// ├── core/                => Models
// ├── infrastructure/      => Repositories
// ├── services/            => Business Logic
// ├── middleware/          => Middleware
// └── app.js, server.js

// STEP 1: package.json dependencies
// npm install express mongoose express-validator cors dotenv jsonwebtoken bcryptjs

// File: src/config/db.config.js
const mongoose = require('mongoose');
require('dotenv').config();

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log('MongoDB connected');
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

module.exports = connectDB;

// File: src/core/models/customer.model.js
const mongoose = require('mongoose');

const customerSchema = new mongoose.Schema({
  customerId: { type: String, required: true, unique: true },
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  phone: { type: String },
  address: { type: String },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
}, { timestamps: true });

module.exports = mongoose.model('Customer', customerSchema);

// File: src/application/dto/customer.dto.js
class CustomerDTO {
  constructor({ customerId, firstName, lastName, email, phone, address, password, role }) {
    this.customerId = customerId;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.phone = phone;
    this.address = address;
    this.password = password;
    this.role = role;
  }
}

module.exports = CustomerDTO;

// File: src/infrastructure/repositories/customer.repository.js
const Customer = require('../../core/models/customer.model');

class CustomerRepository {
  async create(data) {
    return await Customer.create(data);
  }

  async findAll() {
    return await Customer.find();
  }

  async findById(id) {
    return await Customer.findById(id);
  }

  async findByEmail(email) {
    return await Customer.findOne({ email });
  }

  async update(id, data) {
    return await Customer.findByIdAndUpdate(id, data, { new: true });
  }

  async delete(id) {
    return await Customer.findByIdAndDelete(id);
  }
}

module.exports = new CustomerRepository();

// File: src/services/auth.service.js
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const customerRepository = require('../infrastructure/repositories/customer.repository');
require('dotenv').config();

class AuthService {
  async register(data) {
    const hashedPassword = await bcrypt.hash(data.password, 10);
    const customer = await customerRepository.create({ ...data, password: hashedPassword });
    return customer;
  }

  async login(email, password) {
    const customer = await customerRepository.findByEmail(email);
    if (!customer) throw new Error('Invalid email or password');

    const isMatch = await bcrypt.compare(password, customer.password);
    if (!isMatch) throw new Error('Invalid email or password');

    const token = jwt.sign({ id: customer._id, role: customer.role }, process.env.JWT_SECRET, {
      expiresIn: '1h',
    });
    return { token, customer };
  }
}

module.exports = new AuthService();

// File: src/middleware/auth.middleware.js
const jwt = require('jsonwebtoken');
require('dotenv').config();

const authenticate = (req, res, next) => {
  const token = req.headers['authorization'];
  if (!token) return res.status(401).json({ message: 'No token provided' });

  try {
    const decoded = jwt.verify(token.split(' ')[1], process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    return res.status(403).json({ message: 'Invalid token' });
  }
};

const authorize = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Forbidden' });
    }
    next();
  };
};

module.exports = { authenticate, authorize };

// File: src/api/controllers/auth.controller.js
const authService = require('../../services/auth.service');

exports.register = async (req, res, next) => {
  try {
    const user = await authService.register(req.body);
    res.status(201).json(user);
  } catch (err) {
    next(err);
  }
};

exports.login = async (req, res, next) => {
  try {
    const result = await authService.login(req.body.email, req.body.password);
    res.json(result);
  } catch (err) {
    next(err);
  }
};

// File: src/api/routes/auth.routes.js
const express = require('express');
const router = express.Router();
const authController = require('../controllers/auth.controller');

router.post('/register', authController.register);
router.post('/login', authController.login);

module.exports = router;

// File: src/api/routes/customer.routes.js
const express = require('express');
const router = express.Router();
const customerController = require('../controllers/customer.controller');
const { authenticate, authorize } = require('../../middleware/auth.middleware');

router.post('/', authenticate, authorize('admin'), customerController.create);
router.get('/', authenticate, authorize('admin'), customerController.getAll);
router.get('/:id', authenticate, authorize('admin', 'user'), customerController.getById);
router.put('/:id', authenticate, authorize('admin', 'user'), customerController.update);
router.delete('/:id', authenticate, authorize('admin'), customerController.remove);

module.exports = router;

// File: src/app.js
const express = require('express');
const cors = require('cors');
const customerRoutes = require('./api/routes/customer.routes');
const authRoutes = require('./api/routes/auth.routes');
const connectDB = require('./config/db.config');
const errorMiddleware = require('./middleware/error.middleware');

const app = express();
connectDB();

app.use(cors());
app.use(express.json());

app.use('/api/customers', customerRoutes);
app.use('/api/auth', authRoutes);
app.use(errorMiddleware);

module.exports = app;

// File: .env
// MONGO_URI=mongodb://localhost:27017/yourdb
// JWT_SECRET=your_jwt_secret
