// server.js
const express = require('express');
const sql = require('mssql');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth.routes');
const customerRoutes = require('./routes/customer.routes');
const app = express();

dotenv.config();
app.use(express.json());

// MSSQL config
const dbConfig = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  server: process.env.DB_SERVER,
  database: process.env.DB_NAME,
  options: {
    encrypt: true, // Use true if using Azure
    trustServerCertificate: true, // Change for production
  }
};

sql.connect(dbConfig).then(() => console.log('MSSQL connected')).catch(err => console.error('DB Connection Error:', err));

app.use('/api/auth', authRoutes);
app.use('/api/customers', customerRoutes);

app.listen(process.env.PORT || 5000, () => {
  console.log(`Server running on port ${process.env.PORT}`);
});

// .env
PORT=5000
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_SERVER=localhost
DB_NAME=jwt_auth_db
JWT_SECRET=your_jwt_secret_key

// middleware/authenticate.js
const jwt = require('jsonwebtoken');

const authenticate = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'Access token missing' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (err) {
    return res.status(403).json({ message: 'Invalid token' });
  }
};

module.exports = authenticate;

// middleware/authorize.js
const authorize = (roles = []) => {
  if (typeof roles === 'string') roles = [roles];
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Unauthorized' });
    }
    next();
  };
};

module.exports = authorize;

// routes/auth.routes.js
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const sql = require('mssql');
const router = express.Router();

router.post('/register', async (req, res) => {
  const { name, email, password, role } = req.body;
  try {
    const check = await sql.query`SELECT * FROM Users WHERE email = ${email}`;
    if (check.recordset.length > 0) return res.status(400).json({ message: 'User already exists' });

    const hashedPassword = await bcrypt.hash(password, 10);
    await sql.query`INSERT INTO Users (name, email, password, role) VALUES (${name}, ${email}, ${hashedPassword}, ${role})`;
    res.status(201).json({ message: 'User registered' });
  } catch (err) {
    res.status(500).json({ message: 'Registration error', error: err });
  }
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const result = await sql.query`SELECT * FROM Users WHERE email = ${email}`;
    const user = result.recordset[0];
    if (!user) return res.status(400).json({ message: 'Invalid credentials' });

    const match = await bcrypt.compare(password, user.password);
    if (!match) return res.status(400).json({ message: 'Invalid credentials' });

    const token = jwt.sign(
      { id: user.id, name: user.name, email: user.email, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    res.json({ token });
  } catch (err) {
    res.status(500).json({ message: 'Login error', error: err });
  }
});

module.exports = router;

// routes/customer.routes.js
const express = require('express');
const sql = require('mssql');
const authenticate = require('../middleware/authenticate');
const authorize = require('../middleware/authorize');
const router = express.Router();

router.post('/', authenticate, authorize('admin'), async (req, res) => {
  const { name, email, phone, address } = req.body;
  try {
    await sql.query`INSERT INTO Customers (name, email, phone, address) VALUES (${name}, ${email}, ${phone}, ${address})`;
    res.status(201).json({ message: 'Customer created' });
  } catch (err) {
    res.status(500).json({ message: 'Create failed', error: err });
  }
});

router.get('/', authenticate, async (req, res) => {
  try {
    const result = await sql.query`SELECT * FROM Customers`;
    res.json(result.recordset);
  } catch (err) {
    res.status(500).json({ message: 'Fetch failed', error: err });
  }
});

router.get('/:id', authenticate, async (req, res) => {
  try {
    const result = await sql.query`SELECT * FROM Customers WHERE id = ${req.params.id}`;
    const customer = result.recordset[0];
    if (!customer) return res.status(404).json({ message: 'Not found' });
    res.json(customer);
  } catch (err) {
    res.status(500).json({ message: 'Fetch failed', error: err });
  }
});

router.put('/:id', authenticate, authorize('admin'), async (req, res) => {
  const { name, email, phone, address } = req.body;
  try {
    await sql.query`UPDATE Customers SET name=${name}, email=${email}, phone=${phone}, address=${address} WHERE id=${req.params.id}`;
    res.json({ message: 'Customer updated' });
  } catch (err) {
    res.status(500).json({ message: 'Update failed', error: err });
  }
});

router.delete('/:id', authenticate, authorize('admin'), async (req, res) => {
  try {
    await sql.query`DELETE FROM Customers WHERE id = ${req.params.id}`;
    res.json({ message: 'Customer deleted' });
  } catch (err) {
    res.status(500).json({ message: 'Delete failed', error: err });
  }
});

module.exports = router;
