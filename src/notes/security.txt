// === SECURITY, ERROR HANDLING, MIDDLEWARE INTEGRATED ARCHITECTURE ===

// File: src/app.js

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const routes = require('./api/routes');
const errorMiddleware = require('./middleware/error.middleware');

const app = express();

// Security Middlewares
app.use(cors());
app.use(helmet());
app.use(morgan('dev'));
app.use(bodyParser.json());

// Routes
app.use('/api', routes);

// Global Error Handler
app.use(errorMiddleware);

module.exports = app;


// File: src/server.js

const app = require('./app');
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});


// File: src/middleware/auth.middleware.js

module.exports = (req, res, next) => {
  // Dummy token validation
  const token = req.headers['authorization'];
  if (!token) return res.status(401).json({ message: 'Access Denied: No Token Provided!' });

  // Simulate validation
  if (token !== 'valid-token') return res.status(403).json({ message: 'Invalid Token!' });

  next();
};


// File: src/middleware/error.middleware.js

module.exports = (err, req, res, next) => {
  console.error(err.stack);
  res.status(err.status || 500).json({ error: err.message || 'Internal Server Error' });
};


// File: src/api/routes/auth.routes.js

const express = require('express');
const router = express.Router();
const AuthController = require('../controllers/auth.controller');

router.post('/login', AuthController.login);
router.post('/register', AuthController.register);

module.exports = router;


// File: src/api/routes/customer.routes.js

const express = require('express');
const router = express.Router();
const CustomerController = require('../controllers/customer.controller');
const authMiddleware = require('../../middleware/auth.middleware');

router.use(authMiddleware);

router.get('/', CustomerController.getAll);
router.get('/:id', CustomerController.getById);
router.post('/', CustomerController.create);
router.put('/:id', CustomerController.update);
router.delete('/:id', CustomerController.remove);

module.exports = router;


// File: src/api/controllers/auth.controller.js

const AuthService = require('../../services/auth.service');

exports.login = async (req, res, next) => {
  try {
    const result = await AuthService.login(req.body);
    res.status(200).json(result);
  } catch (err) {
    next(err);
  }
};

exports.register = async (req, res, next) => {
  try {
    const result = await AuthService.register(req.body);
    res.status(201).json(result);
  } catch (err) {
    next(err);
  }
};


// File: src/api/controllers/customer.controller.js

const CustomerService = require('../../services/customer.service');

exports.getAll = async (req, res, next) => {
  try {
    const customers = await CustomerService.getAll();
    res.json(customers);
  } catch (err) {
    next(err);
  }
};

exports.getById = async (req, res, next) => {
  try {
    const customer = await CustomerService.getById(req.params.id);
    res.json(customer);
  } catch (err) {
    next(err);
  }
};

exports.create = async (req, res, next) => {
  try {
    const newCustomer = await CustomerService.create(req.body);
    res.status(201).json(newCustomer);
  } catch (err) {
    next(err);
  }
};

exports.update = async (req, res, next) => {
  try {
    const updatedCustomer = await CustomerService.update(req.params.id, req.body);
    res.json(updatedCustomer);
  } catch (err) {
    next(err);
  }
};

exports.remove = async (req, res, next) => {
  try {
    await CustomerService.remove(req.params.id);
    res.status(204).send();
  } catch (err) {
    next(err);
  }
};


// File: src/services/auth.service.js

exports.login = async ({ email, password }) => {
  // Fake logic: normally you'd fetch from DB and hash compare
  if (email === 'admin@example.com' && password === 'password') {
    return { token: 'valid-token', user: { id: 1, email } };
  }
  throw new Error('Invalid credentials');
};

exports.register = async ({ email, password }) => {
  // Simulate saving to DB
  return { id: 1, email };
};


// File: src/services/customer.service.js

const customers = []; // Simulate DB

exports.getAll = async () => customers;

exports.getById = async (id) => {
  const customer = customers.find(c => c.id == id);
  if (!customer) throw new Error('Customer not found');
  return customer;
};

exports.create = async (data) => {
  const id = customers.length + 1;
  const newCustomer = { id, ...data };
  customers.push(newCustomer);
  return newCustomer;
};

exports.update = async (id, data) => {
  const index = customers.findIndex(c => c.id == id);
  if (index === -1) throw new Error('Customer not found');
  customers[index] = { ...customers[index], ...data };
  return customers[index];
};

exports.remove = async (id) => {
  const index = customers.findIndex(c => c.id == id);
  if (index === -1) throw new Error('Customer not found');
  customers.splice(index, 1);
};
