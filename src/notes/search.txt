enterprise application + Clean Architecture + Node.js + express.js - Mongoose - customer model with fields customerId, firstName, lastName, email, phone, address, password, role - please give search query both mongoose and how send value from frontend via api ?


ChatGPT said:
Here’s a full example of how to build a search API for a Customer model using Node.js + Express + Mongoose, based on Clean Architecture principles.

✅ Customer Model Fields
js
Copy
Edit
customerId, firstName, lastName, email, phone, address, password, role
🧠 1. Mongoose Search Query (Case-insensitive, Partial Match)
💡 Supports Search by:
customerId

firstName

lastName

email

phone

address

role

js
Copy
Edit
// infrastructure/repositories/customer.repository.js
const Customer = require('../../models/customer.model');

exports.searchCustomers = async (searchTerm) => {
  const regex = new RegExp(searchTerm, 'i'); // i = case-insensitive
  return Customer.find({
    $or: [
      { customerId: regex },
      { firstName: regex },
      { lastName: regex },
      { email: regex },
      { phone: regex },
      { address: regex },
      { role: regex }
    ]
  });
};
🚀 2. API Layer (Controller + Route)
📁 routes/customer.routes.js
js
Copy
Edit
const express = require('express');
const router = express.Router();
const customerService = require('../services/customer.service');

router.get('/search', async (req, res) => {
  try {
    const { q } = req.query; // e.g. /search?q=john
    const results = await customerService.searchCustomers(q || '');
    res.json(results);
  } catch (err) {
    res.status(500).json({ message: 'Search failed', error: err.message });
  }
});

module.exports = router;
💼 3. Service Layer (Business Logic)
📁 services/customer.service.js
js
Copy
Edit
const customerRepo = require('../infrastructure/repositories/customer.repository');

exports.searchCustomers = async (term) => {
  return customerRepo.searchCustomers(term);
};
💡 4. Mongoose Model Example
📁 models/customer.model.js
js
Copy
Edit
const mongoose = require('mongoose');

const customerSchema = new mongoose.Schema({
  customerId: { type: String, required: true, unique: true },
  firstName: String,
  lastName: String,
  email: { type: String, unique: true },
  phone: String,
  address: String,
  password: String,
  role: { type: String, enum: ['admin', 'user'], default: 'user' }
});

module.exports = mongoose.model('Customer', customerSchema);
🧪 5. Frontend (React/Angular/Vanilla Fetch)
✅ API Request Example from Frontend:
js
Copy
Edit
// URL: http://localhost:5000/api/customers/search?q=john

fetch('http://localhost:5000/api/customers/search?q=john', {
  method: 'GET',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}` // if using JWT
  }
})
.then(res => res.json())
.then(data => {
  console.log('Search results:', data);
});
🧱 Summary
Layer	File	Responsibility
Model	customer.model.js	Mongoose schema
Repo	customer.repository.js	DB interaction
Service	customer.service.js	Business logic
Controller	customer.routes.js	Express route handling
Frontend	React/JS fetch	Calls search API via query param q

Would you like:

Pagination with search?

TypeScript version?

Secure hashed password (bcrypt)?

Filter by role, createdAt, or other fields too?

Let me know — I can expand this to a full enterprise-ready module.