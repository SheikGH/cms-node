Integrate SQL (currently using in-memory arrays)?

Implement validations (e.g. using express-validator)?


ChatGPT said:
Great! Let's take your enterprise-level backend architecture further by integrating:

✅ 1. SQL Server Integration (with Stored Procedures)
We'll use:

mssql package for SQL Server connection

Connection via a centralized config

Execute stored procedures for CRUD

✅ 2. Validation with express-validator
We'll validate request bodies in controllers before calling services.

✅ Step-by-Step Implementation
🛠 Install Required Packages:
bash
Copy
Edit
npm install mssql express-validator
📁 Folder Updates:
pgsql
Copy
Edit
src/
├── config/
│   └── db.config.js         # SQL Server DB connection
├── database/
│   └── sql.helper.js        # Execute stored procedures
📄 src/config/db.config.js
js
Copy
Edit
const sql = require('mssql');

const config = {
  user: 'your_username',
  password: 'your_password',
  server: 'your_server', // e.g., localhost
  database: 'your_database',
  options: {
    encrypt: false, // Set to true if using Azure
    trustServerCertificate: true
  }
};

module.exports = config;
📄 src/database/sql.helper.js
js
Copy
Edit
const sql = require('mssql');
const config = require('../config/db.config');

async function executeStoredProcedure(procedureName, inputParams = []) {
  try {
    const pool = await sql.connect(config);
    const request = pool.request();

    inputParams.forEach(param => {
      request.input(param.name, param.type, param.value);
    });

    const result = await request.execute(procedureName);
    return result.recordset || result;
  } catch (err) {
    throw err;
  }
}

module.exports = {
  executeStoredProcedure
};
🧠 Example Stored Procedures in SQL Server
sql
Copy
Edit
CREATE PROCEDURE GetAllCustomers
AS
BEGIN
    SELECT * FROM Customers
END

CREATE PROCEDURE CreateCustomer
    @FirstName NVARCHAR(50),
    @LastName NVARCHAR(50),
    @Email NVARCHAR(100),
    @Phone NVARCHAR(20),
    @Address NVARCHAR(200),
    @Password NVARCHAR(100),
    @Role NVARCHAR(50)
AS
BEGIN
    INSERT INTO Customers (FirstName, LastName, Email, Phone, Address, Password, Role)
    VALUES (@FirstName, @LastName, @Email, @Phone, @Address, @Password, @Role)
END
📄 Update customer.service.js
js
Copy
Edit
const { executeStoredProcedure } = require('../database/sql.helper');
const sql = require('mssql');

exports.getAll = async () => {
  return await executeStoredProcedure('GetAllCustomers');
};

exports.create = async (data) => {
  return await executeStoredProcedure('CreateCustomer', [
    { name: 'FirstName', type: sql.NVarChar, value: data.firstName },
    { name: 'LastName', type: sql.NVarChar, value: data.lastName },
    { name: 'Email', type: sql.NVarChar, value: data.email },
    { name: 'Phone', type: sql.NVarChar, value: data.phone },
    { name: 'Address', type: sql.NVarChar, value: data.address },
    { name: 'Password', type: sql.NVarChar, value: data.password },
    { name: 'Role', type: sql.NVarChar, value: data.role },
  ]);
};
✅ express-validator for DTO-style validation
📄 src/api/validators/customer.validator.js
js
Copy
Edit
const { body } = require('express-validator');

exports.createCustomerValidator = [
  body('firstName').notEmpty().withMessage('First name is required'),
  body('email').isEmail().withMessage('Valid email is required'),
  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters')
];
📄 Update customer.routes.js
js
Copy
Edit
const express = require('express');
const router = express.Router();
const CustomerController = require('../controllers/customer.controller');
const authMiddleware = require('../../middleware/auth.middleware');
const { createCustomerValidator } = require('../validators/customer.validator');
const { validate } = require('../../middleware/validate.middleware');

router.use(authMiddleware);

router.get('/', CustomerController.getAll);
router.post('/', createCustomerValidator, validate, CustomerController.create);

module.exports = router;
📄 src/middleware/validate.middleware.js
js
Copy
Edit
const { validationResult } = require('express-validator');

exports.validate = (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  next();
};
✅ Summary
You now have:

SQL Server integration using mssql and stored procedures

A central SQL helper for executing procedures

Clean separation in services layer

DTO-like validation using express-validator

Modular middleware for error and validation handling

✅ Next Suggestions:
Implement stored procedures for Product and Order

Add password hashing (bcrypt)

Use dotenv for config values

Add role-based access control

Would you like me to help with stored procedures and service code for Product or Order next?